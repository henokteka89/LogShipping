USE DBAUtil
GO
/*
EXEC dbo.ManageLogShippingServers
    @PrimaryServer = 'SQLNODE1',
    @SecondaryServer = 'SQLNODE2',
    @LSDatabase = 'logshippingtest',
    @BackupDirectory = '\\SQLNODE1\LSBackup',
    @CopyDirectory = 'E:\LSLocalCopy',
    @RestoreDirectory = 'E:\LSLocalCopy',
    @CreateLS = 1;


-- 1. Create Log Shipping on both Primary and Secondary
EXEC dbo.usp_manage_log_shipping
    @PrimaryServer = 'PRIMARYSQL01',
    @SecondaryServer = 'SECONDARYSQL01',
    @DatabaseName = 'YourDBName',
    @CreateLS = 1,
    @BackupDirectory = '\\PRIMARYSQL01\LSBackup',
    @CopyDirectory = '\\SECONDARYSQL01\LSCopy',
    @RestoreDirectory = 'C:\LSRestore';

-- 2. Enable and Schedule the Log Shipping Jobs on both Primary and Secondary
EXEC dbo.usp_manage_log_shipping
    @PrimaryServer = 'PRIMARYSQL01',
    @SecondaryServer = 'SECONDARYSQL01',
    @DatabaseName = 'YourDBName',
    @EnableSchedule = 1;

-- 3. Drop Log Shipping configuration on both Primary and Secondary
-- Run this when you want to remove the entire log shipping setup
EXEC dbo.usp_manage_log_shipping
    @PrimaryServer = 'PRIMARYSQL01',
    @SecondaryServer = 'SECONDARYSQL01',
    @DatabaseName = 'YourDBName',
    @DropLS = 1;

*/
 

CREATE OR ALTER PROCEDURE dbo.usp_manage_log_shipping
    @PrimaryServer              SYSNAME,
    @SecondaryServer            SYSNAME,
    @LSDatabase                 NVARCHAR(100),
    @BackupDirectory            NVARCHAR(255),
    @CopyDirectory              NVARCHAR(255),
    @RestoreDirectory           NVARCHAR(255),
    @CreateLS                   BIT = 0,
    @BackupRetentionPeriod      INT = 4320,
    @RestoreThreshold           INT = 45,
	@DropLS BIT = 0

AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @CurrentServer SYSNAME = @@SERVERNAME;

    -- Step 1: Create metadata table if not exists
    IF NOT EXISTS (
        SELECT 1 
        FROM sys.tables 
        WHERE name = 'LSServers' AND schema_id = SCHEMA_ID('dbo')
    )
    BEGIN
        CREATE TABLE dbo.LSServers (
            SN INT IDENTITY(1,1) NOT NULL,
            PRIMARY_SERVER SYSNAME NULL,
            SECONDARY_SERVER SYSNAME NULL
        );
    END

    -- Step 2: Insert server pair if not already there
    IF NOT EXISTS (
        SELECT 1
        FROM dbo.LSServers
        WHERE PRIMARY_SERVER = @PrimaryServer
          AND SECONDARY_SERVER = @SecondaryServer
    )
    BEGIN
        INSERT INTO dbo.LSServers (PRIMARY_SERVER, SECONDARY_SERVER)
        VALUES (@PrimaryServer, @SecondaryServer);
    END

    -- Step 3: Setup log shipping only if requested
    IF @CreateLS = 1
    BEGIN
        IF @CurrentServer = @PrimaryServer
        BEGIN
            -- Primary: Configure log shipping
            EXEC master.dbo.sp_add_log_shipping_primary_database
                @database = @LSDatabase,
                @backup_directory = @BackupDirectory,
                @backup_share = @BackupDirectory,
                @backup_retention_period = @BackupRetentionPeriod,
                @backup_threshold = 60,
                @threshold_alert_enabled = 1,
                @history_retention_period = 5760,
                @monitor_server = @PrimaryServer,
                @monitor_server_security_mode = 1;

            -- === Enable and Schedule Backup Job ===
            DECLARE @job_name NVARCHAR(200) = 'LSBackup_' + @LSDatabase;

            EXEC msdb.dbo.sp_update_job @job_name = @job_name, @enabled = 1;

            IF NOT EXISTS (
                SELECT 1 FROM msdb.dbo.sysschedules WHERE name = N'Every 15 Minutes'
            )
            BEGIN
                EXEC msdb.dbo.sp_add_schedule  
                    @schedule_name = N'Every 15 Minutes',  
                    @enabled = 1,  
                    @freq_type = 4,  
                    @freq_interval = 1,  
                    @freq_subday_type = 4,  
                    @freq_subday_interval = 15,  
                    @active_start_time = 0;
            END

            IF NOT EXISTS (
                SELECT 1 
                FROM msdb.dbo.sysjobs j
                JOIN msdb.dbo.sysjobschedules js ON j.job_id = js.job_id
                JOIN msdb.dbo.sysschedules s ON js.schedule_id = s.schedule_id
                WHERE j.name = @job_name AND s.name = 'Every 15 Minutes'
            )
            BEGIN
                EXEC msdb.dbo.sp_attach_schedule  
                    @job_name = @job_name,
                    @schedule_name = N'Every 15 Minutes';
            END
        END
        ELSE IF @CurrentServer = @SecondaryServer
        BEGIN
            -- Secondary: Configure log shipping
            EXEC master.dbo.sp_add_log_shipping_secondary_primary
                @primary_server = @PrimaryServer,
                @primary_database = @LSDatabase,
                @backup_source_directory = @BackupDirectory,
                @backup_destination_directory = @CopyDirectory;

            EXEC master.dbo.sp_add_log_shipping_secondary_database
                @secondary_database = @LSDatabase,
                @primary_server = @PrimaryServer,
                @primary_database = @LSDatabase,
                @restore_delay = 0,
                @restore_mode = 1,
                @disconnect_users = 1,
                @restore_threshold = @RestoreThreshold,
                @threshold_alert_enabled = 1,
                @history_retention_period = 5760;

            -- === Enable and Schedule Copy/Restore Jobs ===
            DECLARE 
                @job_name_copy NVARCHAR(200) = 'LSCopy_' + @PrimaryServer + '_' + @LSDatabase,
                @job_name_restore NVARCHAR(200) = 'LSRestore_' + @PrimaryServer + '_' + @LSDatabase;

            EXEC msdb.dbo.sp_update_job @job_name = @job_name_copy, @enabled = 1;
            EXEC msdb.dbo.sp_update_job @job_name = @job_name_restore, @enabled = 1;

            IF NOT EXISTS (
                SELECT 1 FROM msdb.dbo.sysschedules WHERE name = N'Every 15 Minutes'
            )
            BEGIN
                EXEC msdb.dbo.sp_add_schedule  
                    @schedule_name = N'Every 15 Minutes',  
                    @enabled = 1,  
                    @freq_type = 4,  
                    @freq_interval = 1,  
                    @freq_subday_type = 4,  
                    @freq_subday_interval = 15,  
                    @active_start_time = 0;
            END

            IF NOT EXISTS (
                SELECT 1 
                FROM msdb.dbo.sysjobs j
                JOIN msdb.dbo.sysjobschedules js ON j.job_id = js.job_id
                JOIN msdb.dbo.sysschedules s ON js.schedule_id = s.schedule_id
                WHERE j.name = @job_name_copy AND s.name = 'Every 15 Minutes'
            )
            BEGIN
                EXEC msdb.dbo.sp_attach_schedule  
                    @job_name = @job_name_copy,
                    @schedule_name = N'Every 15 Minutes';
            END

            IF NOT EXISTS (
                SELECT 1 
                FROM msdb.dbo.sysjobs j
                JOIN msdb.dbo.sysjobschedules js ON j.job_id = js.job_id
                JOIN msdb.dbo.sysschedules s ON js.schedule_id = s.schedule_id
                WHERE j.name = @job_name_restore AND s.name = 'Every 15 Minutes'
            )
            BEGIN
                EXEC msdb.dbo.sp_attach_schedule  
                    @job_name = @job_name_restore,
                    @schedule_name = N'Every 15 Minutes';
            END
        END
    END
END
-- DROP Log Shipping if requested
IF @DropLS = 1
BEGIN
    --DECLARE @CurrentServer SYSNAME = @@SERVERNAME;

    -- Secondary cleanup
    IF @CurrentServer = @SecondaryServer
    BEGIN
        PRINT 'Dropping Log Shipping config on SECONDARY server...';

        DECLARE 
            @LSDatabase_S NVARCHAR(100) = (
                SELECT TOP 1 primary_database 
                FROM msdb.dbo.log_shipping_monitor_secondary
            ),
            @PrimaryServer_S NVARCHAR(100) = (
                SELECT TOP 1 primary_server 
                FROM msdb.dbo.log_shipping_monitor_secondary
            );

        IF @LSDatabase_S IS NOT NULL AND @PrimaryServer_S IS NOT NULL
        BEGIN
            EXEC master.dbo.sp_delete_log_shipping_secondary_database
                @secondary_database = @LSDatabase_S;

            EXEC master.dbo.sp_delete_log_shipping_secondary_primary
                @primary_server = @PrimaryServer_S,
                @primary_database = @LSDatabase_S;
        END
    END

    -- Primary cleanup
    IF @CurrentServer = @PrimaryServer
    BEGIN
        PRINT 'Dropping Log Shipping config on PRIMARY server...';

        -- Loop through secondaries (if more than one in future)
        DECLARE @SecondaryDB SYSNAME = @LSDatabase;

        -- Remove secondary metadata from primary
        EXEC master.dbo.sp_delete_log_shipping_primary_secondary
            @primary_database = @LSDatabase,
            @secondary_server = @SecondaryServer,
            @secondary_database = @SecondaryDB;

        -- Finally remove primary DB config
        EXEC master.dbo.sp_delete_log_shipping_primary_database
            @database = @LSDatabase;
    END

    PRINT 'Log Shipping teardown complete.';
END
