LONG STORY SHORT: WHAT THE BELOW DOES
1. ON THE PRIMARY, IT ENABLE LS AND ADD JOBS (ALERT AND BACKUP) BUT DONT ENABLE AND SCHEDULE BY DEFAULT. SO AT THE END THERE IS A SCRIPT TO ENABLE AND SCHEDULE THE JOBS. tHE ALERT IS ENABLED AND RUNS EVERY 2 MIN.
2. ON THE SECONDARY, IT ADDS THE SECONDARY AND CREATE JOBS (COPY AND RESTORE). AT THE END THERE IS A SCRIPT TO ENABLE AND START THE JOB.



 -- Run on the PRIMARY SERVER

-- STEP 1: Enable log shipping (in case it's not already enabled)
/*EXEC master.dbo.sp_configure 'show advanced options', 1;
RECONFIGURE;
EXEC master.dbo.sp_configure 'log shipping', 1;
RECONFIGURE;
*/
-- Variables
DECLARE 
    @primary_database        sysname       = N'logshippingtest',          -- Your database name
    @backup_directory        nvarchar(500) = N'\\HENOK\Liya Picture', -- Shared path accessible to both
    @backup_job_name         sysname,
    @backup_retention_period int           = 4320,    -- in minutes (3 days)
    @monitor_server          sysname       = @@SERVERNAME,
    @monitor_server_security_mode int      = 1,       -- 1 = Windows Auth
    @backup_job_id           UNIQUEIDENTIFIER;

-- STEP 2: Configure Log Shipping on Primary
EXEC master.dbo.sp_add_log_shipping_primary_database
    @database = @primary_database,
    @backup_directory = @backup_directory,
	@backup_share = @backup_directory,
    @backup_retention_period = @backup_retention_period,
    @backup_job_name = NULL,
    @backup_threshold = 60,
    @threshold_alert_enabled = 1,
    @history_retention_period = 5760,
    @monitor_server = @monitor_server,
    @monitor_server_security_mode = @monitor_server_security_mode,
    @backup_job_id = @backup_job_id OUTPUT;



---------------
Each has to be scheduled in both 
---------------




-- Adding secondary server and next Database 
-- Replace with your actual values
EXEC master.dbo.sp_add_log_shipping_secondary_primary
    @primary_server = N'henok',                 -- exact name of primary
    @primary_database = N'logshippingtest',     -- DB name on primary
    @backup_source_directory = N'\\HENOK\Liya Picture',  -- shared path used by primary to backup
    @backup_destination_directory = N'E:\LSLocalCopy',      -- where to copy files locally
    @copy_job_name = NULL,
    @copy_job_id = NULL;


-- Variables
DECLARE 
    @secondary_database      sysname       = N'logshippingtest'         -- Must match the restored DB name
DECLARE
@primary_server          sysname       = N'henok'        -- Replace with actual primary
DECLARE
@primary_database        sysname       = @secondary_database,
    @copy_directory          nvarchar(500) = N'E:\LSLocalCopy',        -- Local copy folder
    @restore_directory       nvarchar(500) = N'E:\LSLocalCopy',          -- Optional: location of MDF/LDF
    @copy_job_id             UNIQUEIDENTIFIER,
    @restore_job_id          UNIQUEIDENTIFIER;

-- STEP 4: Add secondary DB
EXEC master.dbo.sp_add_log_shipping_secondary_database
    @secondary_database = @secondary_database,
    @primary_server = @primary_server,
    @primary_database = @primary_database,
    @restore_delay = 0,
    @restore_mode = 1, -- Standby=0, NoRecovery=1
    @disconnect_users = 1,
    @restore_threshold = 45,
    @threshold_alert_enabled = 1,
    @history_retention_period = 5760
    --,@monitor_server = @primary_server
    --,@monitor_server_security_mode = 1,




----------------------------------------------------------------------
ENABLING AND SCHEDULING THE JOBS 
----------------------------------------------------------------------
-- On Primary
select primary_database from msdb.dbo.log_shipping_monitor_primary
Declare @servername nvarchar(100) = @@servername
Declare @LSdatabase nvarchar(100) = (select primary_database from msdb.dbo.log_shipping_monitor_primary) --'logshippingtest'
Declare @job_name nvarchar(200) = 'LSBackup_' + @LSdatabase
--select @job_name

-- Enable the job
Print 'Enabling a job... '
EXEC msdb.dbo.sp_update_job  
    @job_name = @job_name --'LSBackup_logshippingtest'  
    ,@enabled = 1;
Print '
Job enabled'
-- Create the schedule (only if it doesn't already exist)
IF NOT EXISTS (
    SELECT 1 FROM msdb.dbo.sysschedules WHERE name = N'Every 15 Minutes'
)
BEGIN
    EXEC msdb.dbo.sp_add_schedule  
        @schedule_name = N'Every 15 Minutes',  
        @enabled = 1,  
        @freq_type = 4,              -- Daily  
        @freq_interval = 1,          -- Every day  
        @freq_subday_type = 4,       -- Minutes  
        @freq_subday_interval = 15,  -- Every 15 minutes  
        @active_start_time = 0;      -- 12:00 AM
END

-- Attach the schedule to the job (only if not already attached)
IF NOT EXISTS (
    SELECT 1 
    FROM msdb.dbo.sysjobs j
    JOIN msdb.dbo.sysjobschedules js ON j.job_id = js.job_id
    JOIN msdb.dbo.sysschedules s ON js.schedule_id = s.schedule_id
    WHERE j.name = @job_name /*'LSBackup_logshippingtest'*/ AND s.name = 'Every 15 Minutes'
)
BEGIN
    EXEC msdb.dbo.sp_attach_schedule  
        @job_name = @job_name --'LSBackup_logshippingtest'  
        ,@schedule_name = N'Every 15 Minutes';
END



-----------------------------------
-- On Secondary
--select * from msdb.dbo.log_shipping_monitor_secondary
 Declare @servername nvarchar(100) = @@servername
Declare @LSdatabase nvarchar(100) = (select primary_database from msdb.dbo.log_shipping_monitor_secondary) --'logshippingtest'
Declare @primaryserver  nvarchar(100) = (select primary_server from msdb.dbo.log_shipping_monitor_secondary)
Declare @job_name_copy nvarchar(200) = 'LSCopy_' + @primaryserver + '_' + @LSdatabase
Declare @job_name_restore nvarchar(200) = 'LSRestore_' + @primaryserver + '_' + @LSdatabase
 
--select @job_name_copy, @job_name_restore

-- Enable the job
Print 'Enabling a job... '
EXEC msdb.dbo.sp_update_job  
    @job_name = @job_name_copy --'LSBackup_logshippingtest'  
    ,@enabled = 1;
Print 'Job enabled'

Print '
Enabling a job... '
EXEC msdb.dbo.sp_update_job  
    @job_name = @job_name_restore --'LSBackup_logshippingtest'  
    ,@enabled = 1;
Print 'Job enabled'


-- Create the schedule (only if it doesn't already exist)
IF NOT EXISTS (
    SELECT 1 FROM msdb.dbo.sysschedules WHERE name = N'Every 15 Minutes'
)
BEGIN
    EXEC msdb.dbo.sp_add_schedule  
        @schedule_name = N'Every 15 Minutes',  
        @enabled = 1,  
        @freq_type = 4,              -- Daily  
        @freq_interval = 1,          -- Every day  
        @freq_subday_type = 4,       -- Minutes  
        @freq_subday_interval = 15,  -- Every 15 minutes  
        @active_start_time = 0;      -- 12:00 AM
END

-- Attach the schedule to the job (only if not already attached)

-- For the copy job
IF NOT EXISTS (
    SELECT 1 
    FROM msdb.dbo.sysjobs j
    JOIN msdb.dbo.sysjobschedules js ON j.job_id = js.job_id
    JOIN msdb.dbo.sysschedules s ON js.schedule_id = s.schedule_id
    WHERE j.name = @job_name_copy /*'LSBackup_logshippingtest'*/ AND s.name = 'Every 15 Minutes'
)
BEGIN
Print '
Scheduling a job... '
    EXEC msdb.dbo.sp_attach_schedule  
        @job_name = @job_name_copy --'LSBackup_logshippingtest'  
        ,@schedule_name = N'Every 15 Minutes';
Print 'Scheduling Completed... '
END
 
-- For the restore job
IF NOT EXISTS (
    SELECT 1 
    FROM msdb.dbo.sysjobs j
    JOIN msdb.dbo.sysjobschedules js ON j.job_id = js.job_id
    JOIN msdb.dbo.sysschedules s ON js.schedule_id = s.schedule_id
    WHERE j.name = @job_name_restore /*'LSBackup_logshippingtest'*/ AND s.name = 'Every 15 Minutes'
)
BEGIN
Print '
Scheduling a job... '
    EXEC msdb.dbo.sp_attach_schedule  
        @job_name = @job_name_restore --'LSBackup_logshippingtest'  
        ,@schedule_name = N'Every 15 Minutes';
Print 'Scheduling Completed... '
END

